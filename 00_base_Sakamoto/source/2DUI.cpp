//============================================
//
//	2DUI [2DUI.cpp]
//	Author:sakamoto kai
//
//============================================
#include "2DUI.h"
#include "renderer.h"
#include "manager.h"

//====================================================================
// 定数定義
//====================================================================
namespace
{
	float NUMBER_WIGHT = 100.0f;	// 横幅
	float NUMBER_HEIGHT = 100.0f;	// 縦幅
}

//==========================================
// 静的メンバ変数宣言
//==========================================
CListManager<C2DUI>* C2DUI::m_pList = nullptr; // オブジェクトリスト

//====================================================================
//コンストラクタ
//====================================================================
C2DUI::C2DUI(int nPriority) : CObject2D(nPriority)
{
	SetWidth(NUMBER_WIGHT);
	SetHeight(NUMBER_HEIGHT);
	m_nSample = 0;
}

//====================================================================
//デストラクタ
//====================================================================
C2DUI::~C2DUI()
{

}

//====================================================================
//生成処理
//====================================================================
C2DUI* C2DUI::Create(void)
{
	C2DUI* pSample2D = nullptr;

	if (pSample2D == nullptr)
	{
		//オブジェクト2Dの生成
		pSample2D = new C2DUI();
	}

	//オブジェクトの初期化処理
	if (FAILED(pSample2D->Init()))
	{//初期化処理が失敗した場合
		return nullptr;
	}

	return pSample2D;
}

//====================================================================
//初期化処理
//====================================================================
HRESULT C2DUI::Init(void)
{
	CObject2D::Init();

	//新しくcppを作成した時は新しいTYPEを列挙に追加して指定すること
	SetType(CObject::TYPE_2DUI);

	if (m_pList == nullptr)
	{// リストマネージャー生成
		m_pList = CListManager<C2DUI>::Create();
		if (m_pList == nullptr) { assert(false); return E_FAIL; }
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	return S_OK;
}

//====================================================================
//終了処理
//====================================================================
void C2DUI::Uninit(void)
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}

	CObject2D::Uninit();
}

//====================================================================
//更新処理
//====================================================================
void C2DUI::Update(void)
{
	//頂点情報の更新
	CObject2D::Update();


	//----頂点情報を変更したい場合は以下のコードを使用すること-----
	//VERTEX_2D* pVtx;	//頂点ポインタを所得

	////頂点バッファをロックし、両店情報へのポインタを所得
	//GetVtxBuff()->Lock(0, 0, (void**)&pVtx, 0);

	////位置
	//pVtx[0].pos;
	//pVtx[1].pos;
	//pVtx[2].pos;
	//pVtx[3].pos;

	////色
	//pVtx[0].col;
	//pVtx[1].col;
	//pVtx[2].col;
	//pVtx[3].col;

	////テクスチャ
	//pVtx[0].tex;
	//pVtx[1].tex;
	//pVtx[2].tex;
	//pVtx[3].tex;

	////頂点バッファをアンロックする
	//GetVtxBuff()->Unlock();
}

//====================================================================
//描画処理
//====================================================================
void C2DUI::Draw(void)
{
	CObject2D::Draw();
}

//====================================================================
//リスト取得
//====================================================================
CListManager<C2DUI>* C2DUI::GetList(void)
{
	return m_pList;
}
