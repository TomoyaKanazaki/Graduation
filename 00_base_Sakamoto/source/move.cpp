//============================================
//
//	移動処理 [move.cpp]
//	Author:morikawa shunya
//
//============================================
#include "move.h"
#include "renderer.h"
#include "manager.h"

//==========================================
// 定数定義
//==========================================
namespace
{
	
}

//===========================================
// 静的メンバ変数宣言
//===========================================
CListManager<CMove>* CMove::m_pList = nullptr; // オブジェクトリスト

//====================================================================
//コンストラクタ
//====================================================================
CMove::CMove()
{
	
}

//====================================================================
//デストラクタ
//====================================================================
CMove::~CMove()
{

}

//====================================================================
//生成処理
//====================================================================
CMove* CMove::Create(void)
{
	CMove* pFire = nullptr;

	if (pFire == nullptr)
	{
		//移動の生成
		pFire = new CMove();
	}

	//オブジェクトの初期化処理
	if (FAILED(pFire->Init()))
	{//初期化処理が失敗した場合
		assert(false);
		return nullptr;
	}

	return pFire;
}

//====================================================================
//初期化処理
//====================================================================
HRESULT CMove::Init(void)
{
	// リストマネージャーの生成
	if (m_pList == nullptr)
	{
		m_pList = CListManager<CMove>::Create();
		if (m_pList == nullptr) { assert(false); return E_FAIL; }
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	return S_OK;
}

//====================================================================
//終了処理
//====================================================================
void CMove::Uninit(void)
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}
}

//====================================================================
//更新処理
//====================================================================
void CMove::Update(void)
{
}

//====================================================================
//描画処理
//====================================================================
void CMove::Draw(void)
{
	
}

//====================================================================
//リスト取得
//====================================================================
CListManager<CMove>* CMove::GetList(void)
{
	return m_pList;
}
