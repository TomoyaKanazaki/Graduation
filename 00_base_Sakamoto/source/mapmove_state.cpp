//============================================
//
//	マップ移動状態の管理処理 [mapmove_state.h]
//	Author:Satone Shion
//
//============================================
#include "mapmove_state.h"
#include "MapMove.h"

//===========================================
// 定数定義
//===========================================
namespace
{}

//**********************************************************************************************************
// 状態管理
//**********************************************************************************************************
//============================================
// コンストラクタ
//============================================
CMapMoveState::CMapMoveState()
{
	m_RotType = ROTTYPE_MAX;
}
//====================================================================
// 移動方向を設定
//====================================================================
void CMapMoveState::SetMoveRot(void)
{
	////傾き方向指定処理
	//m_DevilArrow = rand() % 2;

	//if (m_SlopwArrowOld == ROTTYPE_UP || m_SlopwArrowOld == ROTTYPE_DOWN)
	//{// 前回の傾き方向が上下だった場合

	//	// 今回の傾き方向は左右にする
	//	if (m_DevilArrow == ROTTYPE_UP)
	//	{ // 上の場合

	//		m_DevilArrow = ROTTYPE_LEFT;		// 左
	//	}
	//	else if (m_DevilArrow == ROTTYPE_DOWN)
	//	{ // 下の場合

	//		m_DevilArrow = ROTTYPE_RIGHT;		// 右
	//	}
	//}

	//// 今回の傾き方向を記録する
	//m_SlopwArrowOld = m_DevilArrow;
	//m_nStateNum = m_DevilArrow;
}


//**********************************************************************************************************
// 待機状態
//**********************************************************************************************************
//============================================
// コンストラクタ
//============================================
CMapStateWait::CMapStateWait()
{
}

//============================================
// 初期化処理
//============================================
void CMapStateWait::Init(void)
{
}

//============================================
// 更新処理
//============================================
void CMapStateWait::Update()
{

}

//**********************************************************************************************************
// スクロール状態
//**********************************************************************************************************

//**********************************************************************************************************
// 傾き状態
//**********************************************************************************************************
//============================================
// コンストラクタ
//============================================
CMapStateSlope::CMapStateSlope()
{
	m_bSlope = false;		// 傾いてない
}

//============================================
// 初期化処理
//============================================
void CMapStateSlope::Init(void)
{
	m_bSlope = false;		// 傾いてない
}

//============================================
// 更新処理
//============================================
void CMapStateSlope::Update()
{

}

//============================================
// 設定処理
//============================================
void CMapStateSlope::Set(void)
{
	// 傾いている状態かどうかを切り替える
	m_bSlope = !m_bSlope;

	//if (m_bSlope)
	//{
	//	// 傾きの向き設定する
	//	SetMoveRot();

	//	// 傾き状態(方向)設定
	//	switch (m_DevilArrow + MOVE_SLOPE_UP)
	//	{
	//	case MOVE_SLOPE_UP:		// 上
	//		m_State = MOVE_SLOPE_UP;

	//		// サウンド再生
	//		CManager::GetInstance()->GetSound()->PlaySound(CSound::SOUND_LABEL_SE_SIGN_UP);
	//		break;
	//	case MOVE_SLOPE_DOWN:	// 下
	//		m_State = MOVE_SLOPE_DOWN;

	//		// サウンド再生
	//		CManager::GetInstance()->GetSound()->PlaySound(CSound::SOUND_LABEL_SE_SIGN_DOWN);
	//		break;
	//	case MOVE_SLOPE_LEFT:	// 左
	//		m_State = MOVE_SLOPE_LEFT;

	//		// サウンド再生
	//		CManager::GetInstance()->GetSound()->PlaySound(CSound::SOUND_LABEL_SE_SIGN_LEFT);
	//		break;
	//	case MOVE_SLOPE_RIGHT:	// 右
	//		m_State = MOVE_SLOPE_RIGHT;

	//		// サウンド再生
	//		CManager::GetInstance()->GetSound()->PlaySound(CSound::SOUND_LABEL_SE_SIGN_RIGHT);
	//		break;
	//	}

	//}
}

//============================================
// 待機状態に切り替え
//============================================
void CMapStateSlope::WaitSlope(CMapMove* pMapMove)
{
	// 待機状態にする
	pMapMove->ChangeMoveState(new CMapStateWait);
}
