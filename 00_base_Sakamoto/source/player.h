//============================================
//
//	プレイヤーの処理 [Player.h]
//	Author:sakamoto kai
//
//============================================
#ifndef _PLAYER_H_
#define _PLAYER_H_

#include "object.h"
#include "useful.h"

//前方宣言
class CModel;
class CMotion;
class CObject2D;
class CObject3D;
class CObjGauge2D;
class CUltimate;
class CSlowManager;
class CObjectBillboard;
class CNumber;
class CMoveHelpUI;
class CParameterUI;

class CEnemy;
class CBoss;
class CLifeUi;
class CFire;

//オブジェクトプレイヤークラス
class CPlayer : public CObject
{
private:
	static const int ENCOUNT_MAX = 128;

public:
	CPlayer(int nPriority = 2);
	~CPlayer();

	//プレイヤーのモーション
	enum ACTION_TYPE
	{
		ACTION_WAIT = 0,		//待機
		ACTION_MOVE,			//移動
		ACTION_EGG,				//卵状態(未完成００
		ACTION_DEATH,			//死亡状態(未完成０１
		ACTION_MAX,				//最大
	};

	//プレイヤーの状態
	enum STATE
	{
		STATE_WAIT = 0,		//待機
		STATE_WALK,			//歩き
		STATE_DEATH,		//死亡
		STATE_EGG,			//卵
		STATE_ATTACK,		//攻撃
		STATE_MAX,			//最大
	};

	// プレイヤーの移動方向
	enum MOVE_STATE
	{
		MOVE_STATE_WAIT = 0,	// 待機
		MOVE_STATE_LEFT,		// 左方向
		MOVE_STATE_RIGHT,		// 右方向
		MOVE_STATE_UP,			// 上方向
		MOVE_STATE_DOWN,		// 下方向
		MOVE_STATE_MAX,			// 最大
	};

	// アイテムの種類
	enum ITEM_TYPE
	{
		TYPE_NONE = 0,		// 何もない
		TYPE_CROSS,			// 十字架
		TYPE_BIBLE,			// 聖書
		TYPE_MAX
	};

	D3DMATRIX GetMtxWorld(void) { return m_mtxWorld; }
	static CPlayer* Create();
	HRESULT Init(void);
	void Uninit(void);
	void Update(void);
	void TitleUpdate(void);
	void GameUpdate(void);
	void TutorialUpdate(void);
	void Draw(void);

	void SetPos(D3DXVECTOR3 pos) { m_pos = pos; }
	D3DXVECTOR3 GetPos(void) { return m_pos; }
	void SetMove(D3DXVECTOR3 move) { m_move = move; }
	D3DXVECTOR3 GetMove(void) { return m_move; }
	void SetRot(D3DXVECTOR3 rot) { m_rot = rot; }
	D3DXVECTOR3 GetRot(void) { return m_rot; }
	void SetSize(D3DXVECTOR3 size) { m_size = size; }
	D3DXVECTOR3 GetSize(void) { return m_size; }
	STATE GetState(void) { return m_State; }
	bool GetJump(void) { return m_bJump; }
	void SetCameraPos(D3DXVECTOR3 pos) { m_CameraPos = pos; }
	D3DXVECTOR3 GetCameraPos(void) { return m_CameraPos; }
	void SetAction(ACTION_TYPE Action, float BlendTime);
	ACTION_TYPE GetAction(void) { return m_Action; }
	void SetModelDisp(bool Sst);
	void SetPartsDisp(int nParts, bool Set);
	void SetMultiMatrix(bool Set) { m_bMultiMatrix = Set; }
	bool GetMultiMatrix(void) { return m_bMultiMatrix; }
	void SetUseMultiMatrix(D3DXMATRIX Set) { m_UseMultiMatrix = Set; }
	D3DXMATRIX GetUseMultiMatrix(void) { return m_UseMultiMatrix; }

	void SetUseItem(bool bUse) { m_UseItem = bUse; }
	bool GetbUseItem() { return m_UseItem; }

	int GetWightNumber() { return m_nMapWight; }
	int GetHeightNumber() { return m_nMapHeight; }
	bool GetGritCenter() { return m_bGritCenter; }

	void Death(void);
	bool SortObject(D3DXVECTOR3 pos);					// オブジェクトとのソート処理

	void SetItemType(ITEM_TYPE eType);
	ITEM_TYPE GetItemType() { return m_eItemType; }		// アイテムの種類取得

	// 静的メンバ関数
	static CListManager<CPlayer>* GetList(void); // リスト取得

private:
	void MyObjCreate(void);							//自分が保持するオブジェクトの生成
	void ActionState(void);							//モーションと状態の管理
	void StateManager(void);						//状態管理
	void Move(void);								//移動処理
	void Rot(void);									//移動方向処理
	void Attack(void);								//攻撃処理
	void CollisionWall(useful::COLLISION XYZ);		//壁との当たり判定
	void SearchWall(void);							//壁のサーチ判定
	void CollisionDevilHole(useful::COLLISION XYZ);	//デビルホールとの当たり判定
	void CollisionEnemy(void);						// 敵との当たり判定
	void CollisionStageOut(void);					// ステージ外の当たり判定
	void MapSystemNumber(void);						// プレイヤーがマップのどのマスに存在しているか設定する

	void CameraPosUpdate(void);	//カメラ位置更新処理
	float MoveSlopeX(void);		//傾き中の移動量変動
	float MoveSlopeZ(void);		//傾き中の移動量変動
	void PosUpdate(void);		//位置更新処理
	void RotUpdate(void);		//向き更新処理

	void DebugKey(void);		//デバッグキー

	void LoadLevelData(const char* pFilename);

	ACTION_TYPE m_Action;
	ACTION_TYPE m_AtkAction;	//攻撃状態記録用変数
	D3DXVECTOR3 m_pos;			//位置
	D3DXVECTOR3 m_posOld;		//過去の位置
	D3DXVECTOR3 m_move;			//移動量
	D3DXVECTOR3 m_Objmove;		//オブジェクトから影響される移動量
	D3DXVECTOR3 m_rot;			//向き
	D3DXVECTOR3 m_rotDest;		//向きの目的地
	D3DXVECTOR3 m_AutoMoveRot;	//自動移動の移動方向
	D3DXVECTOR3 m_size;			//大きさ
	D3DXVECTOR3 m_AtkPos;		//攻撃位置
	D3DXVECTOR3 m_CameraPos;	//カメラ位置位置
	D3DXMATRIX m_mtxWorld;		//ワールドマトリックス
	bool m_bJump;				//ジャンプをしたかどうか
	int m_nActionCount;			//行動のカウント
	STATE m_State;				//状態
	MOVE_STATE m_MoveState;		//移動方向
	int m_nStateCount;			//状態管理用カウント

	float m_CollisionRot;		//当たり判定用の向き

	int m_nMapWight;			//マップの横番号
	int m_nMapHeight;			//マップの縦番号
	bool m_bGritCenter;			//グリットの中心位置にいるかどうか

	int m_nLife;				//ライフ
	bool m_OKL;					//左への進行が許されるかどうか
	bool m_OKR;					//右への進行が許されるかどうか
	bool m_OKU;					//上への進行が許されるかどうか
	bool m_OKD;					//下への進行が許されるかどうか
	bool m_bInput;				//入力を行ったかどうか

	bool m_UseItem;				//アイテムが使用可能かどうか

	CSlowManager* m_pSlow;		// スロー

	ITEM_TYPE m_eItemType;		// 持ってるアイテムの種類

	//階層構造とモーションのポインタ
	CModel* m_apModel[64];
	CMotion* m_pMotion;
	char* m_aModelName[64];
	int m_nNumModel;
	CLifeUi* m_pLifeUi;

	//マップとのマトリックス情報
	bool m_bMultiMatrix;					//マトリックスの掛け合わせをするかどうか
	D3DXMATRIX m_UseMultiMatrix;			//掛け合わせるマトリックス

	// 静的メンバ変数
	static CListManager<CPlayer>* m_pList; // オブジェクトリスト

	// メンバ変数
	CListManager<CPlayer>::AIterator m_iterator; // イテレーター
};

#endif